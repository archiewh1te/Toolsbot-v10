import socket
from loader import dp
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from keyboards.default import kb_menu, kb_back
from utils.misc import rate_limit


@dp.message_handler(Text(equals="üåê–£–∑–Ω–∞—Ç—å IP —Å–∞–π—Ç–∞"))
async def ip_by_hostname(message: types.Message, state: FSMContext):
    await message.reply(f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL-–∞–¥—Ä–µ—Å –≤–µ–±-—Å–∞–π—Ç–∞: ', reply_markup=kb_back)
    await state.set_state("get_ip")  # --- –Ω–∞–∑–Ω–∞—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@rate_limit(limit=5)
@dp.message_handler(text='‚¨Ö–ù–∞–∑–∞–¥', state='get_ip')
async def quit(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é', reply_markup=kb_menu)

@dp.message_handler(state='get_ip')  # ---- –ø–æ–ª—É—á–∞–µ–º —Å—Ç–µ–π—Ç get_ip (–∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∑–∞–Ω–∞—á–µ–Ω –≤—ã—à–µ)
async def get_ip_hostname(message: types.Message, state: FSMContext):
    try:
        await message.reply(f'Hostname: {message.text}\nIp –∞–¥—Ä–µ—Å: {socket.gethostbyname(message.text)}',reply_markup=kb_menu)
        await state.finish()  # ------ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    except socket.gaierror as error:
        await message.reply(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç - {error}')


